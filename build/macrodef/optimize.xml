<?xml version="1.0" encoding="UTF-8"?>
<project name="Jaguarundi - MACRODEF - OPTIMIZE">

    <!--
        We use ${imported.basedir} to reference local libs
        in case (only) this file is imported in another project.
    -->

    <dirname property="imported.basedir" file="${ant.file.Jaguarundi - MACRODEF - OPTIMIZE}"/>

    <!--
        Include ant-contrib (to be sure it's available when this file is imported)
    -->

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${imported.basedir}/../lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

	<!--
		Properties and default values (may be overridden by your properties file):
		- lib.closurecompiler.level = SIMPLE_OPTIMIZATIONS
	-->

	<macrodef name="optimize-js">

		<attribute name="inputFilelist"/>
		<attribute name="outputDir"/>
		<attribute name="outputFile" default="script.js"/>
		<attribute name="tempFile" default="temp.js"/>
		<attribute name="refFile" default=""/>
		<attribute name="refTag" default="&lt;!--##OPTIMIZE_JS##--&gt;"/>
		<attribute name="refType" default="element"/>
		<attribute name="outputFileLocation" default=""/>

		<sequential>

			<echo message="--- Optimizing Javascript ---"/>

			<!-- Concatenate files -->
			<echo message="Concatenating files into @{outputDir}/@{tempFile}"/>
			<concat destfile="@{outputDir}/@{tempFile}">
				<filelist refid="@{inputFilelist}"/>
			</concat>

			<!-- Closure Compiler Application -->
			<closurecompiler
				fileInput="@{outputDir}/@{tempFile}"
				fileOutput="@{outputDir}/@{outputFile}"/>

			<!-- Version in filename and update reference in template file -->
			<addClippedChecksum
				dir="@{outputDir}"
				file="@{outputFile}"
				type="js"
				refFile="@{refFile}"
				refTag="@{refTag}"
				refType="@{refType}"
				outputFileLocation="@{outputFileLocation}"/>

			<!-- Cleanup -->
			<delete file="@{outputDir}/@{tempFile}"/>

			<echo message="--- Optimizing Javascript done ---"/>
			<echo message=""/>
		</sequential>
	</macrodef>

	<macrodef name="optimize-css">

		<attribute name="inputFilelist"/>
		<attribute name="outputDir"/>
		<attribute name="outputFile" default="stylesheet.css"/>
		<attribute name="tempFile" default="temp.css"/>
		<attribute name="refFile" default=""/>
		<attribute name="refTag" default="&lt;!--##OPTIMIZE_CSS##--&gt;"/>
		<attribute name="outputFileLocation" default=""/>

		<sequential>

			<echo message="--- Optimizing CSS ---"/>

			<!-- Concatenate files (in specific ordered filelist) -->
			<echo message="Concatenating files into @{outputDir}/@{tempFile}"/>
			<concat destfile="@{outputDir}/@{tempFile}">
				<filelist refid="@{inputFilelist}"/>
			</concat>

			<!-- YUI Compressor -->
			<yuicompressor
				fileInput="@{outputDir}/@{tempFile}"
				fileOutput="@{outputDir}/@{outputFile}"/>

			<!-- Version in filename and update reference in template file -->
			<addClippedChecksum
				dir="@{outputDir}"
				file="@{outputFile}"
				type="css"
				refFile="@{refFile}"
				refTag="@{refTag}"
				outputFileLocation="@{outputFileLocation}"/>

			<!-- Cleanup -->
			<delete file="@{outputDir}/@{tempFile}"/>

			<echo message="--- Optimizing CSS done ---"/>
			<echo message=""/>

		</sequential>
	</macrodef>

    <macrodef name="optimize-html">

   		<attribute name="inputDir"/>
   		<attribute name="outputDir"/>

   		<sequential>

   			<echo message="--- Optimizing HTML ---"/>

   			<!-- Closure Compiler Application -->
   			<htmlcompressor
   				inputDir="@{inputDir}"
   				outputDir="@{outputDir}"/>

   			<echo message="--- Optimizing Javascript done ---"/>
   			<echo message=""/>
   		</sequential>
   	</macrodef>


    <macrodef name="closurecompiler">

		<attribute name="fileInput"/>
		<attribute name="fileOutput"/>

		<sequential>

			<!-- Set default value for compilation level -->
			<property name="lib.closurecompiler.level" value="SIMPLE_OPTIMIZATIONS"/>

			<echo message="Closure Compiler Application is saving minified output to @{fileOutput}"/>
		    <java jar="${imported.basedir}/../lib/compiler-20111003.jar" fork="true">
		        <arg line="--compilation_level ${lib.closurecompiler.level} --js @{fileInput} --js_output_file @{fileOutput}" />
		    </java>
		</sequential>
	</macrodef>

	<macrodef name="yuicompressor">

		<attribute name="fileInput"/>
		<attribute name="fileOutput"/>

		<sequential>
			<echo message="YUI Compressor is saving minified output to @{fileOutput}"/>
		    <java jar="${imported.basedir}/../lib/yuicompressor-2.4.6.jar" fork="true">
		        <arg line="--type css -o @{fileOutput} @{fileInput}" />
		    </java>
		</sequential>
	</macrodef>

    <macrodef name="htmlcompressor">

        <attribute name="inputDir"/>
      	<attribute name="outputDir"/>

        <sequential>
            <echo message="HtmlCompressor is saving minified output to @{outputDir}"/>
            <java jar="${imported.basedir}/../lib/htmlcompressor-1.5.2.jar" fork="true">
                <arg line="--type html"/>
                <arg value="--remove-intertag-spaces"/>
                <arg value="--remove-style-attr"/>
                <arg value="--remove-link-attr"/>
                <arg value="--remove-script-attr"/>
                <arg value="--compress-css"/>
                <arg value="--compress-js"/>
                <arg line="--js-compressor closure"/>
                <arg line="--closure-opt-level simple"/>
                <arg value="-o"/>
                <arg value="@{inputDir}"/>
                <arg value="@{outputDir}"/>
            </java>
        </sequential>
	</macrodef>

	<macrodef name="addClippedChecksum">

		<attribute name="dir" />
		<attribute name="file"/>
		<attribute name="type"/>
		<attribute name="refFile"/>
		<attribute name="refTag"/>
		<attribute name="refType" default="element"/>
		<attribute name="outputFileLocation"/>

		<sequential>

            <!-- Create checksum of optimized file -->
            <checksum file="@{dir}/@{file}" property="checksum"/>

            <!-- Find the #'s in filename and determine the length -->
            <propertyregex
                property="checksum.placeholder"
                input="@{file}"
                regexp="[^#]*([#]*)"
                select="\1"
                override="true"/>

            <length string="${checksum.placeholder}" property="checksum.placeholder.length"/>

            <!-- Store new filename with (clipped) checksum in new filename for optimized file -->
            <propertyregex
                property="filename.optimized"
                input="@{file}|${checksum}"
                regexp="([^#]*)([#]*)([^|]*)\|(.{${checksum.placeholder.length}})"
                select="\1\4\3"
                override="true"/>

			<!-- Rename file -->
			<echo message="Versioning: Renaming @{file} to ${filename.optimized}"/>
			<move file="@{dir}/@{file}" tofile="@{dir}/${filename.optimized}" />

            <if>
                <equals arg1="@{refFile}" arg2="" />
                <then>
                    <!-- No template file given -->
                    <echo message="Versioning: Not updating references"/>
                </then>
                <else>

                    <!-- Update filename in template file -->
                    <echo message="Versioning: Replacing tag @{refTag} in @{refFile}"/>
                    <if>
                        <equals arg1="@{type}" arg2="css" />
                        <then>
                            <replaceregexp
                                file="@{refFile}"
                                match="@{refTag}(.*)@{refTag}"
                                flags="s"
                                replace="&lt;link rel=&quot;stylesheet&quot; href=&quot;@{outputFileLocation}${filename.optimized}&quot; type=&quot;text/css&quot;/&gt;"/>
                        </then>
                    </if>
                    <if>
                        <equals arg1="@{type}" arg2="js" />
                        <then>
                            <var name="refReplace" value="&lt;script src=&quot;@{outputFileLocation}${filename.optimized}&quot;&gt;&lt;/script&gt;"/>
                            <if>
                                <equals arg1="@{refType}" arg2="string" />
                                <then>
                                    <var name="refReplace" value="&quot;@{outputFileLocation}${filename.optimized}&quot;"/>
                                </then>
                            </if>
                            <replaceregexp
                                file="@{refFile}"
                                match="@{refTag}(.*)@{refTag}"
                                flags="s"
                                replace="${refReplace}"/>
                        </then>
                    </if>

                </else>
            </if>

			<!-- Cleanup (unsetting properties so they can be re-used) -->
			<var name="checksum" value="" unset="true"/>
			<var name="checksum.placeholder" value="" unset="true"/>
			<var name="checksum.placeholder.length" value="" unset="true"/>
			<var name="filename.optimized" value="" unset="true"/>
			<var name="refReplace" value="" unset="true"/>
		</sequential>
	</macrodef>

</project>
